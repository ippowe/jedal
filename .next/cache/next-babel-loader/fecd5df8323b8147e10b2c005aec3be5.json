{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nvar initialState = [{\n  id: 1,\n  desc: \"운동 하기\",\n  completed: false\n}, {\n  id: 2,\n  desc: \"제철달력 만들기\",\n  completed: false\n}];\nvar nextTodoId = initialState.length + 1;\nvar note = createSlice({\n  name: \"note\",\n  initialState: initialState,\n  reducers: {\n    addNote: {\n      reducer: function reducer(state, action) {\n        var _action$payload = action.payload,\n            id = _action$payload.id,\n            desc = _action$payload.desc,\n            completed = _action$payload.completed;\n        state.push({\n          id: id,\n          desc: desc,\n          completed: completed\n        });\n      },\n      prepare: function prepare(desc) {\n        console.log(nextTodoId, initialState.length);\n        return {\n          payload: {\n            id: nextTodoId++,\n            desc: desc,\n            completed: false\n          }\n        };\n      }\n    },\n    toggleNote: function toggleNote(state, action) {\n      console.log(action);\n      var todo = state.find(function (todo) {\n        return todo.id === action.payload;\n      });\n\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    }\n  }\n});\nvar _note$actions = note.actions,\n    addNote = _note$actions.addNote,\n    toggleNote = _note$actions.toggleNote;\nexport { addNote, toggleNote };\nexport default note;","map":{"version":3,"sources":["/Users/hans/dev/jedal/modules/note.ts"],"names":["createSlice","initialState","id","desc","completed","nextTodoId","length","note","name","reducers","addNote","reducer","state","action","payload","push","prepare","console","log","toggleNote","todo","find","actions"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAQA,IAAMC,YAA0B,GAAG,CAAC;AAClCC,EAAAA,EAAE,EAAE,CAD8B;AAElCC,EAAAA,IAAI,EAAE,OAF4B;AAGlCC,EAAAA,SAAS,EAAE;AAHuB,CAAD,EAIhC;AACDF,EAAAA,EAAE,EAAE,CADH;AAEDC,EAAAA,IAAI,EAAE,UAFL;AAGDC,EAAAA,SAAS,EAAE;AAHV,CAJgC,CAAnC;AAUA,IAAIC,UAAU,GAAGJ,YAAY,CAACK,MAAb,GAAsB,CAAvC;AAEA,IAAMC,IAAI,GAAGP,WAAW,CAAC;AACvBQ,EAAAA,IAAI,EAAE,MADiB;AAEvBP,EAAAA,YAAY,EAAZA,YAFuB;AAGvBQ,EAAAA,QAAQ,EAAE;AACRC,IAAAA,OAAO,EAAE;AACPC,MAAAA,OADO,mBACCC,KADD,EACQC,MADR,EAC2C;AAAA,8BAChBA,MAAM,CAACC,OADS;AAAA,YACxCZ,EADwC,mBACxCA,EADwC;AAAA,YACpCC,IADoC,mBACpCA,IADoC;AAAA,YAC9BC,SAD8B,mBAC9BA,SAD8B;AAEhDQ,QAAAA,KAAK,CAACG,IAAN,CAAW;AAAEb,UAAAA,EAAE,EAAEA,EAAN;AAAUC,UAAAA,IAAI,EAAEA,IAAhB;AAAsBC,UAAAA,SAAS,EAATA;AAAtB,SAAX;AACD,OAJM;AAKPY,MAAAA,OALO,mBAKCb,IALD,EAKe;AACpBc,QAAAA,OAAO,CAACC,GAAR,CAAYb,UAAZ,EAAwBJ,YAAY,CAACK,MAArC;AACA,eAAO;AAAEQ,UAAAA,OAAO,EAAE;AAAEZ,YAAAA,EAAE,EAAEG,UAAU,EAAhB;AAAoBF,YAAAA,IAAI,EAAJA,IAApB;AAA0BC,YAAAA,SAAS,EAAE;AAArC;AAAX,SAAP;AACD;AARM,KADD;AAWRe,IAAAA,UAXQ,sBAWGP,KAXH,EAWUC,MAXV,EAWkB;AACxBI,MAAAA,OAAO,CAACC,GAAR,CAAYL,MAAZ;AACA,UAAMO,IAAI,GAAGR,KAAK,CAACS,IAAN,CAAW,UAAAD,IAAI;AAAA,eAAIA,IAAI,CAAClB,EAAL,KAAYW,MAAM,CAACC,OAAvB;AAAA,OAAf,CAAb;;AACA,UAAIM,IAAJ,EAAU;AACRA,QAAAA,IAAI,CAAChB,SAAL,GAAiB,CAACgB,IAAI,CAAChB,SAAvB;AACD;AACF;AAjBO;AAHa,CAAD,CAAxB;oBAwBuCG,IAAI,CAACe,O;IAA7BZ,O,iBAAAA,O;IAASS,U,iBAAAA,U;;AAExB,eAAeZ,IAAf","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\nexport interface INoteState {\n  id: number;\n  desc: string;\n  completed: boolean;\n}\n\nconst initialState: INoteState[] = [{\n  id: 1,\n  desc: \"운동 하기\",\n  completed: false\n}, {\n  id: 2,\n  desc: \"제철달력 만들기\",\n  completed: false\n}];\n\nlet nextTodoId = initialState.length + 1;\n\nconst note = createSlice({\n  name: \"note\",\n  initialState,\n  reducers: {\n    addNote: {\n      reducer(state, action: PayloadAction<INoteState>) {\n        const { id, desc, completed } = action.payload;\n        state.push({ id: id, desc: desc, completed });\n      },\n      prepare(desc: string) {\n        console.log(nextTodoId, initialState.length);\n        return { payload: { id: nextTodoId++, desc, completed: false } };\n      }\n    },\n    toggleNote(state, action) {\n      console.log(action);\n      const todo = state.find(todo => todo.id === action.payload);\n      if (todo) {\n        todo.completed = !todo.completed;\n      }\n    }\n  }\n});\n\nexport const { addNote, toggleNote } = note.actions;\n\nexport default note;\n"]},"metadata":{},"sourceType":"module"}